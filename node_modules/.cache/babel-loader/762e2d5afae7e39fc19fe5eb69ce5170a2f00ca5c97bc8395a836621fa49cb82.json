{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initScript = initScript;\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nfunction initScript() {\n  function onDOMContentLoaded() {\n    console.log('DOM fully loaded and parsed');\n    // Your script logic here\n    let shakeQueue = [];\n    let isShaking = false;\n    let pressCount = 0;\n    let pressed = false;\n    let resetTimeout;\n    const maxAngle = 360; // Maximum angle to prevent excessive shaking\n    const minDuration = 0.2; // Minimum duration to prevent excessive speed\n\n    let canPlayVideo = true;\n    let currentTimeoutId; // Variable to store the current timeout ID\n\n    const videoSources = [{\n      src: \"/assets/vid/home1.mp4\",\n      class: \"homevideo1\",\n      description: \"Sunbathing, beers, and ocean breezes on the Mediterranean!\"\n    }, {\n      src: \"/assets/vid/home2.mp4\",\n      class: \"homevideo2\",\n      description: \"Ducks enjoying a swim by the oceanside, weaving between the boats.\"\n    }, {\n      src: \"/assets/vid/home3.mp4\",\n      class: \"homevideo3\",\n      description: \"A cat strolling on the ancient stone steps, shot in Athens.\"\n    }];\n    let nonPlayed = [...videoSources];\n    let currentVideoSource = videoSources[0];\n    function isMobilePhone() {\n      const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n      return /android|iPhone|iPod/i.test(userAgent);\n    }\n    function isTouchScreen() {\n      const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n      return /android|iPhone|iPad|iPod/i.test(userAgent);\n    }\n    function changeVideoSource() {\n      // Get a new random index from nonPlayed\n      const newIndex = Math.floor(Math.random() * nonPlayed.length);\n\n      // Select the new video source using the new index\n      const source = nonPlayed.splice(newIndex, 1)[0]; // Remove the selected video from nonPlayed\n      currentVideoSource = source;\n      const videoElement = document.getElementById('videoElement');\n      const currentSourceElement = videoElement.querySelector('source');\n      currentSourceElement.setAttribute('src', source.src);\n      videoElement.setAttribute('class', source.class);\n      videoElement.load();\n\n      // Update the description content\n      const descriptionContentElement = document.getElementById('descriptionContent');\n      descriptionContentElement.innerHTML = `${source.description}<br><p>Click for color and sound!</p>`;\n    }\n    function preloadVideos() {\n      videoSources.forEach(videoData => {\n        const video = document.createElement('video');\n        video.src = videoData.src;\n        video.preload = 'auto';\n        video.autoplay = true;\n        video.loop = true;\n        video.muted = true;\n        video.style.display = 'none'; // Hide the video element\n        document.body.appendChild(video);\n      });\n    }\n    function updateSubtitle() {\n      const subtitleElement = document.getElementById('welcomeSubtitle');\n      const isMobile = window.matchMedia(\"(max-width: 768px)\").matches;\n      if (isMobile) {\n        subtitleElement.textContent = \"Hello! I'm Han-yu, a junior at HKU, majoring in AI. I love to explore new places and code apps. I'm ready to share my journey with you!\";\n      } else {\n        subtitleElement.textContent = \"Hello! I'm Han-yu (Henry), a junior at HKU, majoring in Applied AI. I love to explore new places and code apps. I'm excited to have you here and share my journey with you!\";\n      }\n    }\n    function getTextWidth(text, font) {\n      const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n      const context = canvas.getContext(\"2d\");\n      context.font = font;\n      const metrics = context.measureText(text);\n      return metrics.width;\n    }\n    function getCssStyle(element, prop) {\n      return window.getComputedStyle(element, null).getPropertyValue(prop);\n    }\n    function getCanvasFont(el) {\n      const fontWeight = getCssStyle(el, 'font-weight') || 'normal';\n      const fontSize = getCssStyle(el, 'font-size') || '16px';\n      const fontFamily = getCssStyle(el, 'font-family') || 'Times New Roman';\n      return `${fontWeight} ${fontSize} ${fontFamily}`;\n    }\n    function adjustTitle() {\n      const videoElement = document.getElementById('videoElement');\n      const imageElement = document.getElementById('imageElement');\n      const titleElement = document.getElementById('welcomeTitle');\n      const subtitleElement = document.getElementById('welcomeSubtitle');\n      const compassIcon = document.getElementById('compassIcon');\n      const mediaElement = videoElement.style.display !== 'none' ? videoElement : imageElement;\n      const mediaHeight = mediaElement.clientHeight;\n      const availableWidth = document.querySelector('.welcome-text').clientWidth;\n\n      // Adjust the font size and line height of the title to fit the width\n      let titleFontSize = 1; // Start with a smaller font size\n      titleElement.style.fontSize = `${titleFontSize}em`;\n      let iconScaleFactor = 0.3; // Scale factor to adjust the icon size relative to the text\n      compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n      let textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n      while (textWidth < availableWidth && titleFontSize < 5) {\n        // Constrain max font size to 5em\n        titleFontSize += 0.1;\n        titleElement.style.fontSize = `${titleFontSize}em`;\n        compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n        textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n      }\n      while (textWidth > availableWidth && titleFontSize > 0.5) {\n        // Constrain min font size to 0.5em\n        titleFontSize -= 0.1;\n        titleElement.style.fontSize = `${titleFontSize}em`;\n        compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n        textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n      }\n    }\n    function adjustSubtitle() {\n      const videoElement = document.getElementById('videoElement');\n      const imageElement = document.getElementById('imageElement');\n      const titleElement = document.getElementById('welcomeTitle');\n      const subtitleElement = document.getElementById('welcomeSubtitle');\n      const compassIcon = document.getElementById('compassIcon');\n      const mediaElement = videoElement.style.display !== 'none' ? videoElement : imageElement;\n      const mediaHeight = mediaElement.clientHeight;\n      const availableWidth = document.querySelector('.welcome-text').clientWidth;\n\n      // Fix the title font size and adjust the subtitle to match the height of the video\n      let subtitleFontSize = 1;\n      subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n      let totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      while (totalHeight < mediaHeight && subtitleFontSize < 3) {\n        // Constrain max font size to 3em\n        subtitleFontSize += 0.01;\n        subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n        totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      }\n\n      // Reduce font size and line height if the total height exceeds the video height\n      while (totalHeight > mediaHeight && subtitleFontSize > 0.5) {\n        // Ensure font size does not go below 0.5em\n        subtitleFontSize -= 0.01;\n        subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n        totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      }\n\n      // Adjust the line height of the subtitle element to fit within the media height\n      let subtitleLineHeight = 1.4; // Starting line height\n      subtitleElement.style.lineHeight = subtitleLineHeight;\n      totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      while (totalHeight < mediaHeight && subtitleLineHeight < 2) {\n        // Constrain max line height to 2\n        subtitleLineHeight += 0.1;\n        subtitleElement.style.lineHeight = subtitleLineHeight;\n        totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      }\n      while (totalHeight > mediaHeight && subtitleLineHeight > 1) {\n        // Ensure line height does not go below 1\n        subtitleLineHeight -= 0.1;\n        subtitleElement.style.lineHeight = subtitleLineHeight;\n        totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n      }\n    }\n    function updateTitles() {\n      updateSubtitle();\n      adjustTitle();\n      const isSmallScreen = window.matchMedia(\"(max-width: 600px)\").matches;\n      if (isSmallScreen) {\n        document.getElementById('welcomeTitle').style.fontSize = '2em';\n        document.getElementById('compassIcon').style.fontSize = '1.1em';\n      }\n      adjustSubtitle();\n    }\n    function typeWriterEffect(text, element, delay = 100, callback) {\n      // Clear any existing timeout to interrupt the previous typing effect\n      if (currentTimeoutId) {\n        clearTimeout(currentTimeoutId);\n      }\n      element.innerHTML = '';\n      let index = 0;\n      const spans = [];\n\n      // Step 1: Create a span for each character\n      for (let i = 0; i < text.length; i++) {\n        const span = document.createElement('span');\n        span.className = 'typed';\n        span.style.color = 'transparent'; // Initially transparent\n        span.textContent = text[i];\n        element.appendChild(span);\n        spans.push(span);\n      }\n\n      // Step 2: Turn each span into the text color one by one\n      function reveal() {\n        if (index < spans.length) {\n          const isDarkMode = document.body.classList.contains('dark-mode');\n          const textColor = isDarkMode ? '#fafafa' : '#252525'; // Change text color based on theme\n\n          spans[index].style.transition = `color 2s`;\n          spans[index].style.color = textColor;\n          index++;\n          currentTimeoutId = setTimeout(reveal, delay); // Store the timeout ID\n        } else {\n          if (callback) callback();\n        }\n      }\n      reveal();\n    }\n    function videoTransition() {\n      let fadeOutApplied = false;\n      const transitionOverlay = document.getElementById('transitionOverlay');\n      transitionOverlay.style.transition = 'opacity 0.3s ease-in-out';\n      videoElement.addEventListener('timeupdate', () => {\n        const timeLeft = videoElement.duration - videoElement.currentTime;\n        if (timeLeft < 0.6 && !fadeOutApplied) {\n          // Adjust the time threshold as needed\n          transitionOverlay.style.opacity = '1';\n          fadeOutApplied = true;\n        }\n      });\n      videoElement.addEventListener('timeupdate', () => {\n        if (videoElement.currentTime > 0.2 && videoElement.currentTime < 1.2) {\n          transitionOverlay.style.opacity = '0';\n          fadeOutApplied = false; // Reset the flag when the video starts playing again\n        }\n      });\n\n      // videoElement.addEventListener('playing', () => {\n      //     transitionOverlay.style.opacity = '0';\n      //     fadeOutApplied = false; // Reset the flag when the video starts playing again\n      // });\n    }\n    function processShakeQueue() {\n      if (shakeQueue.length === 0 || isShaking) return;\n      isShaking = true;\n      const {\n        newAngle,\n        newDuration\n      } = shakeQueue.shift();\n      const compassIcon = document.getElementById('compassIcon');\n      compassIcon.style.setProperty('--shake-angle', `${newAngle}deg`);\n      compassIcon.style.setProperty('--shake-duration', `${newDuration}s`);\n      compassIcon.classList.add('shake');\n      setTimeout(() => {\n        compassIcon.classList.remove('shake');\n        isShaking = false;\n        processShakeQueue(); // Process the next shake in the queue\n      }, newDuration * 1000);\n    }\n    function switchVideoSource() {\n      const videoElement = document.getElementById('videoElement');\n      const transitionOverlay = document.getElementById('transitionOverlay');\n      const descriptionOverlay = document.getElementById('descriptionOverlay');\n      const currentSourceElement = videoElement.querySelector('source');\n      const currentSource = currentSourceElement.getAttribute('src');\n\n      // If nonPlayed is empty, refill it with a copy of videoSources\n      if (nonPlayed.length === 0) {\n        nonPlayed = [...videoSources];\n      }\n\n      // Get a new random index from nonPlayed\n      const newIndex = Math.floor(Math.random() * nonPlayed.length);\n\n      // Select the new video source using the new index\n      const newVideoSource = nonPlayed.splice(newIndex, 1)[0]; // Remove the selected video from nonPlayed\n      currentVideoSource = newVideoSource;\n\n      // Apply flip effect\n      if (!isMobilePhone()) {\n        descriptionOverlay.style.opacity = 0.5;\n      }\n      videoElement.classList.remove('flip2');\n      videoElement.classList.add('flip');\n      transitionOverlay.classList.remove('flip2');\n      transitionOverlay.classList.add('flip');\n      descriptionOverlay.classList.remove('flip2');\n      descriptionOverlay.classList.add('flip');\n\n      // Listen for the midpoint of the flip to change the source\n      videoElement.addEventListener('animationend', () => {\n        // Change the source and load the new video\n        videoElement.pause(); // Pause the video before changing the source\n        videoElement.querySelector('source').src = newVideoSource.src;\n        videoElement.load(); // Load the new video source\n\n        // Restart the flip animation for the second half of the transition\n        videoElement.classList.remove('flip');\n        transitionOverlay.classList.remove('flip');\n        descriptionOverlay.classList.remove('flip');\n\n        // Play the new video source\n        videoElement.play();\n        if (!videoElement.muted) {\n          const descriptionContentElement = document.getElementById('descriptionContent');\n          descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click to silence and fade!</p>`;\n        } else {\n          const descriptionContentElement = document.getElementById('descriptionContent');\n          descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click for color and sound!</p>`;\n        }\n\n        // Add the flip class back to complete the flip animation\n        videoElement.classList.add('flip2');\n        transitionOverlay.classList.add('flip2');\n        descriptionOverlay.classList.add('flip2');\n\n        // Ensure the flip class is removed after the animation completes\n        videoElement.addEventListener('animationend', () => {\n          videoElement.classList.remove('flip2');\n          transitionOverlay.classList.remove('flip2');\n          descriptionOverlay.classList.remove('flip2');\n          videoElement.setAttribute('class', newVideoSource.class);\n          descriptionOverlay.style.opacity = '';\n        }, {\n          once: true\n        });\n      }, {\n        once: true\n      });\n    }\n    function createHint() {\n      // Create a new <small> element\n      var hintParagraph = document.createElement(\"small\");\n\n      // Set the class and style of the new <p> element\n      hintParagraph.id = \"hint\";\n      hintParagraph.className = \"tipcolor-2\";\n      hintParagraph.style.float = \"right\";\n\n      // Set the text content of the new element\n      hintParagraph.textContent = 'Click the compass!';\n\n      // Find the element with the class \"header\"\n      var headerElement = document.querySelector(\".header-title\");\n\n      // Append the new <p> element to the header element\n      if (headerElement) {\n        headerElement.insertBefore(hintParagraph, headerElement.children[2] || null);\n      }\n    }\n    function compassFlash() {\n      // const hintParagraph = document.getElementById('hint');\n      // hintParagraph.classList.remove(\"tipcolor-2\");\n      // hintParagraph.classList.add(\"tipcolor-1\");\n\n      const compassIcon = document.getElementById('compassIcon');\n      compassIcon.style.transition = 'color 1.5s';\n\n      // Function to toggle between the classes\n      function toggleTipColor() {\n        compassIcon.classList.add(\"tipcolor-1\");\n        setTimeout(function () {\n          compassIcon.classList.remove(\"tipcolor-1\");\n        }, 800);\n      }\n\n      // Set an interval to toggle the classes every 4000ms if pressed is false\n      const hintFlash = setInterval(function () {\n        if (!pressed) {\n          toggleTipColor();\n        } else {\n          clearInterval(hintFlash); // Clear the interval\n        }\n      }, 2400);\n    }\n    function displayWelcomeContent() {\n      const titleElement = document.getElementById('welcomeTitle');\n      titleElement.style.transition = 'color 2s';\n      titleElement.style.color = ''; // Reset to original color\n      const subtitleText = document.getElementById('welcomeSubtitle').textContent;\n      const subtitleElement = document.getElementById('welcomeSubtitle');\n      subtitleElement.style.textAlign = 'justify'; // Change to justify after typing is complete\n      subtitleElement.style.textAlignLast = 'justify'; // Change to justify after typing is complete\n      subtitleElement.style.MozTextAlignLast = 'justify'; // Change to justify after typing is complete\n\n      typeWriterEffect(subtitleText, subtitleElement, 10, () => {\n        setTimeout(() => {\n          document.querySelectorAll('header *').forEach(element => {\n            element.style.transition = 'color 2s';\n            element.style.color = ''; // Reset to original color\n          });\n          document.querySelectorAll('footer *').forEach(element => {\n            element.style.transition = 'color 2s';\n            element.style.color = ''; // Reset to original color\n          });\n          const quoteElement = document.getElementById('welcomeQuote');\n          quoteElement.style.transition = 'color 2s';\n          quoteElement.style.color = ''; // Reset to original color\n\n          const overlay = document.getElementById('overlay');\n          overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n\n          setTimeout(() => {\n            compassFlash();\n\n            // Reset the transition property after the color transition is complete\n            setTimeout(() => {\n              document.querySelectorAll('header *').forEach(element => {\n                element.style.transition = 'color 0.5s';\n              });\n              document.querySelectorAll('footer *').forEach(element => {\n                element.style.transition = 'color 0.5s';\n              });\n            }, 2000); // Match this duration with the color transition time (2 seconds)\n          }, 1000);\n        }, 1000);\n      });\n    }\n    function setupDescriptionOverlay() {\n      const videoElement = document.getElementById('videoElement');\n      const descriptionOverlay = document.querySelector('.description-overlay');\n      if (!isTouchScreen()) {\n        videoElement.addEventListener('mouseenter', () => {\n          descriptionOverlay.style.opacity = '0.5';\n        });\n        videoElement.addEventListener('mouseleave', () => {\n          descriptionOverlay.style.opacity = '0';\n        });\n      }\n    }\n    document.getElementById('compassIcon').addEventListener('click', function () {\n      if (canPlayVideo) {\n        switchVideoSource();\n      }\n      pressed = true;\n      const compassIcon = document.getElementById('compassIcon');\n      // const hintParagraph = document.getElementById('hint');\n      compassIcon.classList.remove(\"tipcolor-1\");\n      compassIcon.classList.remove(\"tipcolor-2\");\n      // try{\n      //     hintParagraph.classList.add(\"tipcolor-2\");\n      // } catch (error) {\n      //     console.error(error);\n      // } \n\n      pressCount++;\n\n      // Calculate new angle and duration based on the number of presses\n      let newAngle = Math.min(15 + pressCount * 6, maxAngle); // Increase angle by 6 degrees per press, up to maxAngle\n      let newDuration = Math.max(0.8 - pressCount * 0.06, minDuration); // Decrease duration by 0.06s per press, down to minDuration\n\n      shakeQueue.push({\n        newAngle,\n        newDuration\n      });\n      processShakeQueue();\n\n      // Clear any existing reset timeout\n      clearTimeout(resetTimeout);\n\n      // Set a new reset timeout for 0.5 seconds\n      resetTimeout = setTimeout(() => {\n        pressCount = 0;\n      }, 500);\n    });\n    if (window.location.pathname === '/home') {\n      // Check if the current page is not the homepage\n      const overlay = document.getElementById('overlay');\n      overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n    }\n    changeVideoSource();\n    const videoElement = document.getElementById('videoElement');\n    const fallbackImage = document.getElementById('imageElement');\n    videoElement.style.opacity = '1';\n    // Function to handle video playback and related tasks\n    function handleVideoPlayback() {\n      // Create a flag to indicate whether the video is loaded successfully\n      let videoLoaded = false;\n\n      // Create a timeout to handle the scenario where loadeddata is not fired within 4 seconds\n      const loadTimeout = setTimeout(() => {\n        if (!videoLoaded) {\n          handleVideoError(new Error('Timeout waiting for video to load'));\n        }\n      }, 3000); // 3 seconds\n\n      // Function to handle video errors\n      function handleVideoError(error) {\n        console.error('Error:', error);\n        canPlayVideo = false;\n        videoElement.style.display = 'none';\n        fallbackImage.style.display = 'block';\n        fallbackImage.style.opacity = '1';\n        const checkDimensions = setInterval(function () {\n          if (imageElement.naturalWidth > 0 && imageElement.naturalHeight > 0) {\n            const aspectRatio = imageElement.naturalWidth / imageElement.naturalHeight;\n            // Check if the aspect ratio is approximately 9:16\n            if (Math.abs(aspectRatio - 9 / 16) < 0.01) {\n              clearInterval(checkDimensions);\n              updateTitles();\n              setTimeout(() => {\n                displayWelcomeContent();\n              }, 1000);\n            }\n          }\n        }, 100); // Check every 100ms until dimensions are available\n      }\n\n      // Listen for the loadeddata event to ensure the video is ready\n      videoElement.addEventListener('loadeddata', () => {\n        videoLoaded = true;\n        clearTimeout(loadTimeout); // Clear the timeout since the video is loaded\n\n        // Attempt to play the video\n        videoElement.play().then(() => {\n          const checkDimensions = setInterval(function () {\n            if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {\n              const aspectRatio = videoElement.videoWidth / videoElement.videoHeight;\n              // Check if the aspect ratio is approximately 9:16\n              if (Math.abs(aspectRatio - 9 / 16) < 0.01) {\n                clearInterval(checkDimensions);\n\n                // createHint();\n                setupDescriptionOverlay();\n                updateTitles();\n                videoElement.addEventListener('click', () => {\n                  if (videoElement.muted) {\n                    videoElement.muted = false;\n                    videoElement.style.filter = 'grayscale(0%)';\n                    // Update the description content\n                    const descriptionContentElement = document.getElementById('descriptionContent');\n                    descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click to silence and fade!</p>`;\n                  } else {\n                    videoElement.muted = true;\n                    videoElement.style.filter = 'grayscale(85%)';\n                    // Update the description content\n                    const descriptionContentElement = document.getElementById('descriptionContent');\n                    descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click for color and sound!</p>`;\n                  }\n                });\n                preloadVideos();\n                videoTransition();\n                setTimeout(() => {\n                  displayWelcomeContent();\n                }, 1000);\n              }\n            }\n          }, 100); // Check every 100ms until dimensions are available\n        }).catch(error => {\n          // Handle errors that occur during video playback\n          handleVideoError(error);\n        });\n      }, {\n        once: true\n      });\n\n      // Initial video load attempt\n      try {\n        videoElement.load();\n      } catch (error) {\n        handleVideoError(error);\n      }\n    }\n\n    // Call the function to handle video playback\n    handleVideoPlayback();\n    window.onresize = () => {\n      // Clear any existing timeout to interrupt the previous typing effect\n      if (currentTimeoutId) {\n        clearTimeout(currentTimeoutId);\n      }\n      console.log(\"resize\");\n      updateTitles();\n      const isDarkMode = document.body.classList.contains('dark-mode');\n      const subtitleElement = document.getElementById('welcomeSubtitle');\n      const textColor = isDarkMode ? '#fafafa' : '#252525'; // Change text color based on theme\n      subtitleElement.style.transition = 'color 0s';\n      subtitleElement.style.color = textColor;\n      subtitleElement.style.transition = '';\n      subtitleElement.style.textAlign = 'justify';\n      subtitleElement.style.textAlignLast = 'justify';\n      subtitleElement.style.MozTextAlignLast = 'justify';\n      document.querySelectorAll('header *').forEach(element => {\n        element.style.transition = 'color 2s';\n        element.style.color = ''; // Reset to original color\n      });\n      document.querySelectorAll('footer *').forEach(element => {\n        element.style.transition = 'color 2s';\n        element.style.color = ''; // Reset to original color\n      });\n      const quoteElement = document.getElementById('welcomeQuote');\n      quoteElement.style.transition = 'color 2s';\n      quoteElement.style.color = ''; // Reset to original color\n\n      const overlay = document.getElementById('overlay');\n      overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n    };\n  }\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', onDOMContentLoaded);\n  } else {\n    // The DOMContentLoaded event has already fired\n    onDOMContentLoaded();\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}