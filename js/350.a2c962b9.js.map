{"version":3,"file":"js/350.a2c962b9.js","mappings":"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","sources":["webpack://personalpage/./src/assets/js/home.js"],"sourcesContent":["/* eslint-disable */\nexport function initScript() {\n    if (window.location.hash !== '#/home') { // Check if the current page is not the homepage\n        document.querySelectorAll('header *').forEach(element => {\n            element.style.color = 'transparent';\n        });\n        document.querySelectorAll('footer *').forEach(element => {\n            element.style.color = 'transparent';\n        });\n    }\n    function onDOMContentLoaded() {\n        console.log('DOM fully loaded and parsed');\n        // Your script logic here\n        let shakeQueue = [];\n        let isShaking = false;\n        let pressCount = 0;\n        let pressed = false;\n        let resetTimeout;\n        const maxAngle = 360; // Maximum angle to prevent excessive shaking\n        const minDuration = 0.2; // Minimum duration to prevent excessive speed\n    \n        let canPlayVideo = true;\n    \n        let currentTimeoutId; // Variable to store the current timeout ID\n    \n        const videoSources = [\n            { src: \"/assets/vid/home1.mp4\", class: \"homevideo1\", description: \"Sunbathing, beers, and ocean breezes on the Mediterranean!\" },\n            { src: \"/assets/vid/home2.mp4\", class: \"homevideo2\", description: \"Ducks enjoying a swim by the oceanside, weaving between the boats.\" },\n            { src: \"/assets/vid/home3.mp4\", class: \"homevideo3\", description: \"A cat strolling on the ancient stone steps, shot in Athens.\" }\n        ];\n    \n        let nonPlayed = [...videoSources];\n    \n        let currentVideoSource = videoSources[0];\n    \n        function isMobilePhone() {\n            const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n            return /android|iPhone|iPod/i.test(userAgent);\n        }\n    \n        function isTouchScreen(){\n            const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n            return /android|iPhone|iPad|iPod/i.test(userAgent);\n        }\n    \n        function changeVideoSource() {\n            // Get a new random index from nonPlayed\n            const newIndex = Math.floor(Math.random() * nonPlayed.length);\n    \n            // Select the new video source using the new index\n            const source = nonPlayed.splice(newIndex, 1)[0]; // Remove the selected video from nonPlayed\n            currentVideoSource = source;\n    \n            const videoElement = document.getElementById('videoElement');\n            const currentSourceElement = videoElement.querySelector('source');\n            currentSourceElement.setAttribute('src', source.src)\n            videoElement.setAttribute('class', source.class);\n            videoElement.load();\n    \n            // Update the description content\n            const descriptionContentElement = document.getElementById('descriptionContent');\n            descriptionContentElement.innerHTML = `${source.description}<br><p>Click for color and sound!</p>`;\n        }\n    \n        function preloadVideos() {\n            videoSources.forEach(videoData => {\n                const video = document.createElement('video');\n                video.src = videoData.src;\n                video.preload = 'auto';\n                video.autoplay = true;\n                video.loop = true;\n                video.muted = true;\n                video.style.display = 'none'; // Hide the video element\n                document.body.appendChild(video);\n            });\n        }\n    \n        function updateSubtitle() {\n            const subtitleElement = document.getElementById('welcomeSubtitle');\n            const isMobile = window.matchMedia(\"(max-width: 768px)\").matches;\n    \n            if (isMobile) {\n                subtitleElement.textContent = \"Hello! I'm Han-yu, a junior at HKU, majoring in AI. I love to explore new places and code apps. I'm ready to share my journey with you!\";\n            } else {\n                subtitleElement.textContent = \"Hello! I'm Han-yu (Henry), a junior at HKU, majoring in Applied AI. I love to explore new places and code apps. I'm excited to have you here and share my journey with you!\";\n            }\n        }\n    \n        function getTextWidth(text, font) {\n            const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n            const context = canvas.getContext(\"2d\");\n            context.font = font;\n            const metrics = context.measureText(text);\n            return metrics.width;\n        }\n    \n        function getCssStyle(element, prop) {\n            return window.getComputedStyle(element, null).getPropertyValue(prop);\n        }\n    \n        function getCanvasFont(el) {\n            const fontWeight = getCssStyle(el, 'font-weight') || 'normal';\n            const fontSize = getCssStyle(el, 'font-size') || '16px';\n            const fontFamily = getCssStyle(el, 'font-family') || 'Times New Roman';\n            return `${fontWeight} ${fontSize} ${fontFamily}`;\n        }\n    \n        function adjustTitle() {\n            const videoElement = document.getElementById('videoElement');\n            const imageElement = document.getElementById('imageElement');\n            const titleElement = document.getElementById('welcomeTitle');\n            const subtitleElement = document.getElementById('welcomeSubtitle');\n            const compassIcon = document.getElementById('compassIcon');\n    \n            const mediaElement = videoElement.style.display !== 'none' ? videoElement : imageElement;\n            const mediaHeight = mediaElement.clientHeight;\n            const availableWidth = document.querySelector('.welcome-text').clientWidth;\n    \n            // Adjust the font size and line height of the title to fit the width\n            let titleFontSize = 1; // Start with a smaller font size\n            titleElement.style.fontSize = `${titleFontSize}em`;\n            \n            let iconScaleFactor = 0.3; // Scale factor to adjust the icon size relative to the text\n            compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n            \n            let textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n            while (textWidth < availableWidth && titleFontSize < 5) { // Constrain max font size to 5em\n                titleFontSize += 0.1;\n                titleElement.style.fontSize = `${titleFontSize}em`;\n                compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n                textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n            }\n    \n            while (textWidth > availableWidth && titleFontSize > 0.5) { // Constrain min font size to 0.5em\n                titleFontSize -= 0.1;\n                titleElement.style.fontSize = `${titleFontSize}em`;\n                compassIcon.style.fontSize = `${titleFontSize * iconScaleFactor}em`;\n                textWidth = getTextWidth(titleElement.textContent.replace('O', ''), getCanvasFont(titleElement)) + compassIcon.clientWidth;\n            }\n        }\n    \n        function adjustSubtitle() {\n            const videoElement = document.getElementById('videoElement');\n            const imageElement = document.getElementById('imageElement');\n            const titleElement = document.getElementById('welcomeTitle');\n            const subtitleElement = document.getElementById('welcomeSubtitle');\n            const compassIcon = document.getElementById('compassIcon');\n    \n            const mediaElement = videoElement.style.display !== 'none' ? videoElement : imageElement;\n            const mediaHeight = mediaElement.clientHeight;\n            const availableWidth = document.querySelector('.welcome-text').clientWidth;\n    \n            // Fix the title font size and adjust the subtitle to match the height of the video\n            let subtitleFontSize = 1;\n            subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n            let totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n    \n            while (totalHeight < mediaHeight && subtitleFontSize < 3) { // Constrain max font size to 3em\n                subtitleFontSize += 0.01;\n                subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n                totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n            }\n    \n            // Reduce font size and line height if the total height exceeds the video height\n            while (totalHeight > mediaHeight && subtitleFontSize > 0.5) { // Ensure font size does not go below 0.5em\n                subtitleFontSize -= 0.01;\n                subtitleElement.style.fontSize = `${subtitleFontSize}em`;\n                totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n            }\n    \n            // Adjust the line height of the subtitle element to fit within the media height\n            let subtitleLineHeight = 1.4; // Starting line height\n            subtitleElement.style.lineHeight = subtitleLineHeight;\n            totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n    \n            while (totalHeight < mediaHeight && subtitleLineHeight < 2) { // Constrain max line height to 2\n                subtitleLineHeight += 0.1;\n                subtitleElement.style.lineHeight = subtitleLineHeight;\n                totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n            }\n    \n            while (totalHeight > mediaHeight && subtitleLineHeight > 1) { // Ensure line height does not go below 1\n                subtitleLineHeight -= 0.1;\n                subtitleElement.style.lineHeight = subtitleLineHeight;\n                totalHeight = titleElement.clientHeight + subtitleElement.clientHeight;\n            }\n        }\n    \n        function updateTitles() {\n            updateSubtitle();\n            adjustTitle();\n            const isSmallScreen = window.matchMedia(\"(max-width: 600px)\").matches;\n            if (isSmallScreen) {\n                document.getElementById('welcomeTitle').style.fontSize = '2em';\n                document.getElementById('compassIcon').style.fontSize = '1.1em';\n            }\n            adjustSubtitle();\n        }\n    \n        function typeWriterEffect(text, element, delay = 100, callback) {\n            // Clear any existing timeout to interrupt the previous typing effect\n            if (currentTimeoutId) {\n                clearTimeout(currentTimeoutId);\n            }\n    \n            element.innerHTML = '';\n            let index = 0;\n            const spans = [];\n    \n            // Step 1: Create a span for each character\n            for (let i = 0; i < text.length; i++) {\n                const span = document.createElement('span');\n                span.className = 'typed';\n                span.style.color = 'transparent'; // Initially transparent\n                span.textContent = text[i];\n                element.appendChild(span);\n                spans.push(span);\n            }\n    \n            // Step 2: Turn each span into the text color one by one\n            function reveal() {\n                if (index < spans.length) {\n                    const isDarkMode = document.body.classList.contains('dark-mode');\n                    const textColor = isDarkMode ? '#fafafa' : '#252525'; // Change text color based on theme\n                    \n                    spans[index].style.transition = `color 2s`;\n                    spans[index].style.color = textColor;\n                    index++;\n                    currentTimeoutId = setTimeout(reveal, delay); // Store the timeout ID\n                } else {\n                    if (callback) callback();\n                }\n            }\n    \n            reveal();\n        }\n    \n        function videoTransition() {\n            let fadeOutApplied = false;\n            const transitionOverlay = document.getElementById('transitionOverlay');\n            transitionOverlay.style.transition = 'opacity 0.3s ease-in-out';\n    \n            videoElement.addEventListener('timeupdate', () => {\n                const timeLeft = videoElement.duration - videoElement.currentTime;\n                if (timeLeft < 0.6 && !fadeOutApplied) { // Adjust the time threshold as needed\n                    transitionOverlay.style.opacity = '1';\n                    fadeOutApplied = true;\n                }\n            });\n    \n            videoElement.addEventListener('timeupdate', () => {\n                if (videoElement.currentTime >0.2 && videoElement.currentTime <1.2 ) {\n                    transitionOverlay.style.opacity = '0';\n                    fadeOutApplied = false; // Reset the flag when the video starts playing again\n                }\n            });\n    \n            // videoElement.addEventListener('playing', () => {\n            //     transitionOverlay.style.opacity = '0';\n            //     fadeOutApplied = false; // Reset the flag when the video starts playing again\n            // });\n        }\n    \n        function processShakeQueue() {\n            if (shakeQueue.length === 0 || isShaking) return;\n            \n            isShaking = true;\n            const { newAngle, newDuration } = shakeQueue.shift();\n            \n            const compassIcon = document.getElementById('compassIcon');\n            compassIcon.style.setProperty('--shake-angle', `${newAngle}deg`);\n            compassIcon.style.setProperty('--shake-duration', `${newDuration}s`);\n            \n            compassIcon.classList.add('shake');\n            \n            setTimeout(() => {\n                compassIcon.classList.remove('shake');\n                isShaking = false;\n                processShakeQueue(); // Process the next shake in the queue\n            }, newDuration * 1000);\n        }\n    \n        function switchVideoSource() {\n            const videoElement = document.getElementById('videoElement');\n            const transitionOverlay = document.getElementById('transitionOverlay');\n            const descriptionOverlay = document.getElementById('descriptionOverlay');\n            const currentSourceElement = videoElement.querySelector('source');\n            const currentSource = currentSourceElement.getAttribute('src');\n    \n            // If nonPlayed is empty, refill it with a copy of videoSources\n            if (nonPlayed.length === 0) {\n                nonPlayed = [...videoSources];\n            }\n    \n            // Get a new random index from nonPlayed\n            const newIndex = Math.floor(Math.random() * nonPlayed.length);\n    \n            // Select the new video source using the new index\n            const newVideoSource = nonPlayed.splice(newIndex, 1)[0]; // Remove the selected video from nonPlayed\n            currentVideoSource = newVideoSource;\n    \n            // Apply flip effect\n            if (!isMobilePhone()) {\n                descriptionOverlay.style.opacity = 0.5;\n            }\n            videoElement.classList.remove('flip2');\n            videoElement.classList.add('flip');\n            transitionOverlay.classList.remove('flip2');\n            transitionOverlay.classList.add('flip');\n            descriptionOverlay.classList.remove('flip2');\n            descriptionOverlay.classList.add('flip');\n    \n            // Listen for the midpoint of the flip to change the source\n            videoElement.addEventListener('animationend', () => {\n                // Change the source and load the new video\n                videoElement.pause(); // Pause the video before changing the source\n                videoElement.querySelector('source').src = newVideoSource.src;\n                videoElement.load(); // Load the new video source\n    \n                // Restart the flip animation for the second half of the transition\n                videoElement.classList.remove('flip');\n                transitionOverlay.classList.remove('flip');\n                descriptionOverlay.classList.remove('flip');\n    \n                // Play the new video source\n                videoElement.play();\n    \n                if (!videoElement.muted) {\n                    const descriptionContentElement = document.getElementById('descriptionContent');\n                    descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click to silence and fade!</p>`;\n                } else {\n                    const descriptionContentElement = document.getElementById('descriptionContent');\n                    descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click for color and sound!</p>`;\n                }\n    \n                // Add the flip class back to complete the flip animation\n                videoElement.classList.add('flip2');\n                transitionOverlay.classList.add('flip2');\n                descriptionOverlay.classList.add('flip2');\n    \n                // Ensure the flip class is removed after the animation completes\n                videoElement.addEventListener('animationend', () => {\n                    videoElement.classList.remove('flip2');\n                    transitionOverlay.classList.remove('flip2');\n                    descriptionOverlay.classList.remove('flip2');\n                    videoElement.setAttribute('class', newVideoSource.class);\n                    descriptionOverlay.style.opacity = '';\n                }, { once: true });\n            }, { once: true });\n        }\n    \n        function createHint() {\n            // Create a new <small> element\n            var hintParagraph = document.createElement(\"small\");\n    \n            // Set the class and style of the new <p> element\n            hintParagraph.id = \"hint\";\n            hintParagraph.className = \"tipcolor-2\";\n            hintParagraph.style.float = \"right\";\n    \n            // Set the text content of the new element\n            hintParagraph.textContent = 'Click the compass!';\n    \n            // Find the element with the class \"header\"\n            var headerElement = document.querySelector(\".header-title\");\n    \n            // Append the new <p> element to the header element\n            if (headerElement) {\n                headerElement.insertBefore(hintParagraph, headerElement.children[2] || null);\n            }\n        }\n    \n        function compassFlash() {\n            // const hintParagraph = document.getElementById('hint');\n            // hintParagraph.classList.remove(\"tipcolor-2\");\n            // hintParagraph.classList.add(\"tipcolor-1\");\n    \n            const compassIcon = document.getElementById('compassIcon');\n            compassIcon.style.transition = 'color 1.5s'\n    \n            // Function to toggle between the classes\n            function toggleTipColor() {\n                compassIcon.classList.add(\"tipcolor-1\");\n                setTimeout(function() {\n                    compassIcon.classList.remove(\"tipcolor-1\");\n                }, 800);\n            }\n    \n            // Set an interval to toggle the classes every 4000ms if pressed is false\n            const hintFlash = setInterval(function() {\n                if (!pressed) {\n                    toggleTipColor();\n                } else {\n                    clearInterval(hintFlash); // Clear the interval\n                }\n            }, 2400);\n        }\n    \n        function displayWelcomeContent() {\n            const titleElement = document.getElementById('welcomeTitle');\n            titleElement.style.transition = 'color 2s';\n            titleElement.style.color = ''; // Reset to original color\n            const subtitleText = document.getElementById('welcomeSubtitle').textContent;\n            const subtitleElement = document.getElementById('welcomeSubtitle');\n            subtitleElement.style.textAlign = 'justify'; // Change to justify after typing is complete\n            subtitleElement.style.textAlignLast = 'justify'; // Change to justify after typing is complete\n            subtitleElement.style.MozTextAlignLast = 'justify'; // Change to justify after typing is complete\n    \n            typeWriterEffect(subtitleText, subtitleElement, 10, () => {\n                setTimeout(() => {\n                    document.querySelectorAll('header *').forEach(element => {\n                        element.style.transition = 'color 2s';\n                        element.style.color = ''; // Reset to original color\n                    });\n                    document.querySelectorAll('footer *').forEach(element => {\n                        element.style.transition = 'color 2s';\n                        element.style.color = ''; // Reset to original color\n                    });\n                    const quoteElement = document.getElementById('welcomeQuote');\n                    quoteElement.style.transition = 'color 2s';\n                    quoteElement.style.color = ''; // Reset to original color\n    \n                    const overlay = document.getElementById('overlay');\n                    overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n    \n                    setTimeout(() => {\n                        compassFlash();\n    \n                        // Reset the transition property after the color transition is complete\n                        setTimeout(() => {\n                            document.querySelectorAll('header *').forEach(element => {\n                                element.style.transition = 'color 0.5s';\n                            });\n                            document.querySelectorAll('footer *').forEach(element => {\n                                element.style.transition = 'color 0.5s';\n                            });\n                        }, 2000); // Match this duration with the color transition time (2 seconds)\n                    }, 1000);\n                }, 1000);\n            });\n        }\n    \n        function setupDescriptionOverlay() {\n            const videoElement = document.getElementById('videoElement');\n            const descriptionOverlay = document.querySelector('.description-overlay');\n    \n            if (!isTouchScreen()) {\n                videoElement.addEventListener('mouseenter', () => {\n                    descriptionOverlay.style.opacity = '0.5';\n                });\n    \n                videoElement.addEventListener('mouseleave', () => {\n                    descriptionOverlay.style.opacity = '0';\n                });\n            }\n        }\n    \n        document.getElementById('compassIcon').addEventListener('click', function() {\n    \n            if (canPlayVideo) {\n                switchVideoSource();\n            }\n    \n            pressed = true;\n            const compassIcon = document.getElementById('compassIcon');\n            // const hintParagraph = document.getElementById('hint');\n            compassIcon.classList.remove(\"tipcolor-1\");\n            compassIcon.classList.remove(\"tipcolor-2\");\n            // try{\n            //     hintParagraph.classList.add(\"tipcolor-2\");\n            // } catch (error) {\n            //     console.error(error);\n            // } \n    \n            pressCount++;\n            \n            // Calculate new angle and duration based on the number of presses\n            let newAngle = Math.min(15 + pressCount * 6, maxAngle); // Increase angle by 6 degrees per press, up to maxAngle\n            let newDuration = Math.max(0.8 - pressCount * 0.06, minDuration); // Decrease duration by 0.06s per press, down to minDuration\n            \n            shakeQueue.push({ newAngle, newDuration });\n            processShakeQueue();\n            \n            // Clear any existing reset timeout\n            clearTimeout(resetTimeout);\n            \n            // Set a new reset timeout for 0.5 seconds\n            resetTimeout = setTimeout(() => {\n                pressCount = 0;\n            }, 500);\n        });\n    \n        if (window.location.hash !== '#/home') { // Check if the current page is not the homepage\n            const overlay = document.getElementById('overlay');\n            overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n        }\n    \n        changeVideoSource();\n    \n        const videoElement = document.getElementById('videoElement');\n        const fallbackImage = document.getElementById('imageElement');\n        videoElement.style.opacity = '1';\n        // Function to handle video playback and related tasks\n        function handleVideoPlayback() {\n            // Create a flag to indicate whether the video is loaded successfully\n            let videoLoaded = false;\n    \n            // Create a timeout to handle the scenario where loadeddata is not fired within 4 seconds\n            const loadTimeout = setTimeout(() => {\n                if (!videoLoaded) {\n                    handleVideoError(new Error('Timeout waiting for video to load'));\n                }\n            }, 3000); // 3 seconds\n    \n            // Function to handle video errors\n            function handleVideoError(error) {\n                console.error('Error:', error);\n                canPlayVideo = false;\n                videoElement.style.display = 'none';\n                fallbackImage.style.display = 'block';\n                fallbackImage.style.opacity = '1';\n                const checkDimensions = setInterval(function() {\n                    if (imageElement.naturalWidth > 0 && imageElement.naturalHeight > 0) {\n                        const aspectRatio = imageElement.naturalWidth / imageElement.naturalHeight;\n                        // Check if the aspect ratio is approximately 9:16\n                        if (Math.abs(aspectRatio - (9 / 16)) < 0.01) {\n                            clearInterval(checkDimensions);\n    \n                            updateTitles();\n    \n                            setTimeout(() => {\n                                displayWelcomeContent();\n                            }, 1000);\n                        }\n                    }\n                }, 100); // Check every 100ms until dimensions are available\n            }\n    \n            // Listen for the loadeddata event to ensure the video is ready\n            videoElement.addEventListener('loadeddata', () => {\n                videoLoaded = true;\n                clearTimeout(loadTimeout); // Clear the timeout since the video is loaded\n    \n                // Attempt to play the video\n                videoElement.play().then(() => {\n                    const checkDimensions = setInterval(function() {\n                        if (videoElement.videoWidth > 0 && videoElement.videoHeight > 0) {\n                            const aspectRatio = videoElement.videoWidth / videoElement.videoHeight;\n                            // Check if the aspect ratio is approximately 9:16\n                            if (Math.abs(aspectRatio - (9 / 16)) < 0.01) {\n                                clearInterval(checkDimensions);\n    \n                                // createHint();\n                                setupDescriptionOverlay();\n                                updateTitles();\n    \n                                videoElement.addEventListener('click', () => {\n                                    if (videoElement.muted) {\n                                        videoElement.muted = false;\n                                        videoElement.style.filter = 'grayscale(0%)';\n                                        // Update the description content\n                                        const descriptionContentElement = document.getElementById('descriptionContent');\n                                        descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click to silence and fade!</p>`;\n                                    } else {\n                                        videoElement.muted = true;\n                                        videoElement.style.filter = 'grayscale(85%)';\n                                        // Update the description content\n                                        const descriptionContentElement = document.getElementById('descriptionContent');\n                                        descriptionContentElement.innerHTML = `${currentVideoSource.description}<br><p>Click for color and sound!</p>`;\n                                    }\n                                });\n    \n                                preloadVideos();\n                                videoTransition();\n    \n                                setTimeout(() => {\n                                    displayWelcomeContent();\n                                }, 1000);\n                            }\n                        }\n                    }, 100); // Check every 100ms until dimensions are available\n                }).catch((error) => {\n                    // Handle errors that occur during video playback\n                    handleVideoError(error);\n                });\n            }, { once: true });\n    \n            // Initial video load attempt\n            try {\n                videoElement.load();\n            } catch (error) {\n                handleVideoError(error);\n            }\n        }\n    \n        // Call the function to handle video playback\n        handleVideoPlayback();\n    \n        window.onresize = () => {\n            // Clear any existing timeout to interrupt the previous typing effect\n            if (currentTimeoutId) {\n                clearTimeout(currentTimeoutId);\n            }\n            console.log(\"resize\")\n            updateTitles();\n            const isDarkMode = document.body.classList.contains('dark-mode');\n            const subtitleElement = document.getElementById('welcomeSubtitle');\n            const textColor = isDarkMode ? '#fafafa' : '#252525'; // Change text color based on theme\n            subtitleElement.style.transition = 'color 0s';\n            subtitleElement.style.color = textColor;\n            subtitleElement.style.transition = '';\n            subtitleElement.style.textAlign = 'justify';\n            subtitleElement.style.textAlignLast = 'justify';\n            subtitleElement.style.MozTextAlignLast = 'justify';\n            document.querySelectorAll('header *').forEach(element => {\n                element.style.transition = 'color 2s';\n                element.style.color = ''; // Reset to original color\n            });\n            document.querySelectorAll('footer *').forEach(element => {\n                element.style.transition = 'color 2s';\n                element.style.color = ''; // Reset to original color\n            });\n            const quoteElement = document.getElementById('welcomeQuote');\n            quoteElement.style.transition = 'color 2s';\n            quoteElement.style.color = ''; // Reset to original color\n        \n            const overlay = document.getElementById('overlay');\n            overlay.style.pointerEvents = 'none'; // Disable pointer events to allow clicks\n        };\n    }\n\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', onDOMContentLoaded);\n    } else {\n        // The DOMContentLoaded event has already fired\n        onDOMContentLoaded();\n    }\n}"],"names":["initScript","onDOMContentLoaded","console","log","resetTimeout","shakeQueue","isShaking","pressCount","pressed","maxAngle","minDuration","currentTimeoutId","canPlayVideo","videoSources","src","class","description","nonPlayed","currentVideoSource","isMobilePhone","userAgent","navigator","vendor","window","opera","test","isTouchScreen","changeVideoSource","newIndex","Math","floor","random","length","source","splice","videoElement","document","getElementById","currentSourceElement","querySelector","setAttribute","load","descriptionContentElement","innerHTML","preloadVideos","forEach","videoData","video","createElement","preload","autoplay","loop","muted","style","display","body","appendChild","updateSubtitle","subtitleElement","isMobile","matchMedia","matches","textContent","getTextWidth","text","font","canvas","context","getContext","metrics","measureText","width","getCssStyle","element","prop","getComputedStyle","getPropertyValue","getCanvasFont","el","fontWeight","fontSize","fontFamily","adjustTitle","imageElement","titleElement","compassIcon","mediaElement","availableWidth","clientHeight","clientWidth","titleFontSize","iconScaleFactor","textWidth","replace","adjustSubtitle","mediaHeight","subtitleFontSize","totalHeight","subtitleLineHeight","lineHeight","updateTitles","isSmallScreen","typeWriterEffect","delay","callback","clearTimeout","index","spans","i","span","className","color","push","reveal","isDarkMode","classList","contains","textColor","transition","setTimeout","videoTransition","fadeOutApplied","transitionOverlay","addEventListener","timeLeft","duration","currentTime","opacity","processShakeQueue","newAngle","newDuration","shift","setProperty","add","remove","switchVideoSource","descriptionOverlay","getAttribute","newVideoSource","pause","play","once","compassFlash","toggleTipColor","hintFlash","setInterval","clearInterval","displayWelcomeContent","subtitleText","textAlign","textAlignLast","MozTextAlignLast","querySelectorAll","quoteElement","overlay","pointerEvents","setupDescriptionOverlay","min","max","location","hash","fallbackImage","handleVideoPlayback","videoLoaded","loadTimeout","handleVideoError","Error","error","checkDimensions","naturalWidth","naturalHeight","aspectRatio","abs","then","videoWidth","videoHeight","filter","catch","onresize","readyState"],"sourceRoot":""}